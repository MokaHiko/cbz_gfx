#ifndef CBZ_RENDER_TYPES_H_
#define CBZ_RENDER_TYPES_H_

#include <cbz/cbz_defines.h>

// @ note one to one mapping with 'WGPUVertexFormat'
typedef enum {
  CBZ_VERTEX_FORMAT_UNDEFINED = 0X00000000,
  CBZ_VERTEX_FORMAT_UINT8X2 = 0X00000001,
  CBZ_VERTEX_FORMAT_UINT8X4 = 0X00000002,
  CBZ_VERTEX_FORMAT_SINT8X2 = 0X00000003,
  CBZ_VERTEX_FORMAT_SINT8X4 = 0X00000004,
  CBZ_VERTEX_FORMAT_UNORM8X2 = 0X00000005,
  CBZ_VERTEX_FORMAT_UNORM8X4 = 0X00000006,
  CBZ_VERTEX_FORMAT_SNORM8X2 = 0X00000007,
  CBZ_VERTEX_FORMAT_SNORM8X4 = 0X00000008,
  CBZ_VERTEX_FORMAT_UINT16X2 = 0X00000009,
  CBZ_VERTEX_FORMAT_UINT16X4 = 0X0000000A,
  CBZ_VERTEX_FORMAT_SINT16X2 = 0X0000000B,
  CBZ_VERTEX_FORMAT_SINT16X4 = 0X0000000C,
  CBZ_VERTEX_FORMAT_UNORM16X2 = 0X0000000D,
  CBZ_VERTEX_FORMAT_UNORM16X4 = 0X0000000E,
  CBZ_VERTEX_FORMAT_SNORM16X2 = 0X0000000F,
  CBZ_VERTEX_FORMAT_SNORM16X4 = 0X00000010,
  CBZ_VERTEX_FORMAT_FLOAT16X2 = 0X00000011,
  CBZ_VERTEX_FORMAT_FLOAT16X4 = 0X00000012,
  CBZ_VERTEX_FORMAT_FLOAT32 = 0X00000013,
  CBZ_VERTEX_FORMAT_FLOAT32X2 = 0X00000014,
  CBZ_VERTEX_FORMAT_FLOAT32X3 = 0X00000015,
  CBZ_VERTEX_FORMAT_FLOAT32X4 = 0X00000016,
  CBZ_VERTEX_FORMAT_UINT32 = 0X00000017,
  CBZ_VERTEX_FORMAT_UINT32X2 = 0X00000018,
  CBZ_VERTEX_FORMAT_UINT32X3 = 0X00000019,
  CBZ_VERTEX_FORMAT_UINT32X4 = 0X0000001A,
  CBZ_VERTEX_FORMAT_SINT32 = 0X0000001B,
  CBZ_VERTEX_FORMAT_SINT32X2 = 0X0000001C,
  CBZ_VERTEX_FORMAT_SINT32X3 = 0X0000001D,
  CBZ_VERTEX_FORMAT_SINT32X4 = 0X0000001E,
  CBZ_VERTEX_FORMAT_COUNT,

  CBZ_VERTEX_FORMAT_FORCE_32 = 0xFFFFFFFFu,
} CBZVertexFormat;

// @note one to one mapping with 'WGPUVertexStepMode'
typedef enum {
  CBZ_VERTEX_STEP_MODE_VERTEX = 0x00000000,
  CBZ_VERTEX_STEP_INSTANCE = 0x00000001,

  CBZ_VERTEX_STEP_FORCE_32 = 0xFFFFFFFFu,
} CBZVertexStepMode;

typedef enum {
  CBZ_VERTEX_ATTRIBUTE_POSITION = 0,
  CBZ_VERTEX_ATTRIBUTE_NORMAL,
  CBZ_VERTEX_ATTRIBUTE_TANGENT,
  CBZ_VERTEX_ATTRIBUTE_TEXCOORD0,

  // eColor,
  // eTangent,
  // eJoints,
  // eWeights,
  //
  // eCustom,
  CBZ_VERTEX_ATTRIBUTE_COUNT,
  CBZ_VERTEX_ATTRIBUTE_FORCE_32 = 0xFFFFFFFFu,
} CBZVertexAttributeType;

// @ note one to one mapping with 'WGPUIndexFormat'
typedef enum {
  CBZ_INDEX_FORMAT_UNDEFINED = 0x00000000,
  CBZ_INDEX_FORMAT_UINT16 = 0x00000001,
  CBZ_INDEX_FORMAT_UINT32 = 0x00000002,
} CBZIndexFormat;

// @note one to one mapping with 'WGPUTextureFormat'
typedef enum {
  CBZ_TEXTURE_FORMAT_UNDEFINED = 0X00000000,
  CBZ_TEXTURE_FORMAT_R8UNORM = 0X00000001,
  CBZ_TEXTURE_FORMAT_R8SNORM = 0X00000002,
  CBZ_TEXTURE_FORMAT_R8UINT = 0X00000003,
  CBZ_TEXTURE_FORMAT_R8SINT = 0X00000004,
  CBZ_TEXTURE_FORMAT_R16UINT = 0X00000005,
  CBZ_TEXTURE_FORMAT_R16SINT = 0X00000006,
  CBZ_TEXTURE_FORMAT_R16FLOAT = 0X00000007,
  CBZ_TEXTURE_FORMAT_RG8UNORM = 0X00000008,
  CBZ_TEXTURE_FORMAT_RG8SNORM = 0X00000009,
  CBZ_TEXTURE_FORMAT_RG8UINT = 0X0000000A,
  CBZ_TEXTURE_FORMAT_RG8SINT = 0X0000000B,
  CBZ_TEXTURE_FORMAT_R32FLOAT = 0X0000000C,
  CBZ_TEXTURE_FORMAT_R32UINT = 0X0000000D,
  CBZ_TEXTURE_FORMAT_R32SINT = 0X0000000E,
  CBZ_TEXTURE_FORMAT_RG16UINT = 0X0000000F,
  CBZ_TEXTURE_FORMAT_RG16SINT = 0X00000010,
  CBZ_TEXTURE_FORMAT_RG16FLOAT = 0X00000011,
  CBZ_TEXTURE_FORMAT_RGBA8UNORM = 0X00000012,
  CBZ_TEXTURE_FORMAT_RGBA8UNORMSRGB = 0X00000013,
  CBZ_TEXTURE_FORMAT_RGBA8SNORM = 0X00000014,
  CBZ_TEXTURE_FORMAT_RGBA8UINT = 0X00000015,
  CBZ_TEXTURE_FORMAT_RGBA8SINT = 0X00000016,
  CBZ_TEXTURE_FORMAT_BGRA8UNORM = 0X00000017,
  CBZ_TEXTURE_FORMAT_BGRA8UNORMSRGB = 0X00000018,
  CBZ_TEXTURE_FORMAT_RGB10A2UINT = 0X00000019,
  CBZ_TEXTURE_FORMAT_RGB10A2UNORM = 0X0000001A,
  CBZ_TEXTURE_FORMAT_RG11B10UFLOAT = 0X0000001B,
  CBZ_TEXTURE_FORMAT_RGB9E5UFLOAT = 0X0000001C,
  CBZ_TEXTURE_FORMAT_RG32FLOAT = 0X0000001D,
  CBZ_TEXTURE_FORMAT_RG32UINT = 0X0000001E,
  CBZ_TEXTURE_FORMAT_RG32SINT = 0X0000001F,
  CBZ_TEXTURE_FORMAT_RGBA16UINT = 0X00000020,
  CBZ_TEXTURE_FORMAT_RGBA16SINT = 0X00000021,
  CBZ_TEXTURE_FORMAT_RGBA16FLOAT = 0X00000022,
  CBZ_TEXTURE_FORMAT_RGBA32FLOAT = 0X00000023,
  CBZ_TEXTURE_FORMAT_RGBA32UINT = 0X00000024,
  CBZ_TEXTURE_FORMAT_RGBA32SINT = 0X00000025,
  CBZ_TEXTURE_FORMAT_STENCIL8 = 0X00000026,
  CBZ_TEXTURE_FORMAT_DEPTH16UNORM = 0X00000027,
  CBZ_TEXTURE_FORMAT_DEPTH24PLUS = 0X00000028,
  CBZ_TEXTURE_FORMAT_DEPTH24PLUSSTENCIL8 = 0X00000029,

  CBZ_TEXTURE_FORMAT_DEPTH32FLOAT = 0X0000002A,
  CBZ_TEXTURE_FORMAT_DEPTH32FLOATSTENCIL8 = 0X0000002B,

  CBZ_TEXTURE_FORMAT_BC1RGBAUNORM = 0X0000002C,
  CBZ_TEXTURE_FORMAT_BC1RGBAUNORMSRGB = 0X0000002D,
  CBZ_TEXTURE_FORMAT_BC2RGBAUNORM = 0X0000002E,
  CBZ_TEXTURE_FORMAT_BC2RGBAUNORMSRGB = 0X0000002F,
  CBZ_TEXTURE_FORMAT_BC3RGBAUNORM = 0X00000030,
  CBZ_TEXTURE_FORMAT_BC3RGBAUNORMSRGB = 0X00000031,
  CBZ_TEXTURE_FORMAT_BC4RUNORM = 0X00000032,
  CBZ_TEXTURE_FORMAT_BC4RSNORM = 0X00000033,
  CBZ_TEXTURE_FORMAT_BC5RGUNORM = 0X00000034,
  CBZ_TEXTURE_FORMAT_BC5RGSNORM = 0X00000035,
  CBZ_TEXTURE_FORMAT_BC6HRGBUFLOAT = 0X00000036,
  CBZ_TEXTURE_FORMAT_BC6HRGBFLOAT = 0X00000037,
  CBZ_TEXTURE_FORMAT_BC7RGBAUNORM = 0X00000038,
  CBZ_TEXTURE_FORMAT_BC7RGBAUNORMSRGB = 0X00000039,
  CBZ_TEXTURE_FORMAT_ETC2RGB8UNORM = 0X0000003A,
  CBZ_TEXTURE_FORMAT_ETC2RGB8UNORMSRGB = 0X0000003B,
  CBZ_TEXTURE_FORMAT_ETC2RGB8A1UNORM = 0X0000003C,
  CBZ_TEXTURE_FORMAT_ETC2RGB8A1UNORMSRGB = 0X0000003D,
  CBZ_TEXTURE_FORMAT_ETC2RGBA8UNORM = 0X0000003E,
  CBZ_TEXTURE_FORMAT_ETC2RGBA8UNORMSRGB = 0X0000003F,
  CBZ_TEXTURE_FORMAT_EACR11UNORM = 0X00000040,
  CBZ_TEXTURE_FORMAT_EACR11SNORM = 0X00000041,
  CBZ_TEXTURE_FORMAT_EACRG11UNORM = 0X00000042,
  CBZ_TEXTURE_FORMAT_EACRG11SNORM = 0X00000043,
  CBZ_TEXTURE_FORMAT_ASTC4X4UNORM = 0X00000044,
  CBZ_TEXTURE_FORMAT_ASTC4X4UNORMSRGB = 0X00000045,
  CBZ_TEXTURE_FORMAT_ASTC5X4UNORM = 0X00000046,
  CBZ_TEXTURE_FORMAT_ASTC5X4UNORMSRGB = 0X00000047,
  CBZ_TEXTURE_FORMAT_ASTC5X5UNORM = 0X00000048,
  CBZ_TEXTURE_FORMAT_ASTC5X5UNORMSRGB = 0X00000049,
  CBZ_TEXTURE_FORMAT_ASTC6X5UNORM = 0X0000004A,
  CBZ_TEXTURE_FORMAT_ASTC6X5UNORMSRGB = 0X0000004B,
  CBZ_TEXTURE_FORMAT_ASTC6X6UNORM = 0X0000004C,
  CBZ_TEXTURE_FORMAT_ASTC6X6UNORMSRGB = 0X0000004D,
  CBZ_TEXTURE_FORMAT_ASTC8X5UNORM = 0X0000004E,
  CBZ_TEXTURE_FORMAT_ASTC8X5UNORMSRGB = 0X0000004F,
  CBZ_TEXTURE_FORMAT_ASTC8X6UNORM = 0X00000050,
  CBZ_TEXTURE_FORMAT_ASTC8X6UNORMSRGB = 0X00000051,
  CBZ_TEXTURE_FORMAT_ASTC8X8UNORM = 0X00000052,
  CBZ_TEXTURE_FORMAT_ASTC8X8UNORMSRGB = 0X00000053,
  CBZ_TEXTURE_FORMAT_ASTC10X5UNORM = 0X00000054,
  CBZ_TEXTURE_FORMAT_ASTC10X5UNORMSRGB = 0X00000055,
  CBZ_TEXTURE_FORMAT_ASTC10X6UNORM = 0X00000056,
  CBZ_TEXTURE_FORMAT_ASTC10X6UNORMSRGB = 0X00000057,
  CBZ_TEXTURE_FORMAT_ASTC10X8UNORM = 0X00000058,
  CBZ_TEXTURE_FORMAT_ASTC10X8UNORMSRGB = 0X00000059,
  CBZ_TEXTURE_FORMAT_ASTC10X10UNORM = 0X0000005A,
  CBZ_TEXTURE_FORMAT_ASTC10X10UNORMSRGB = 0X0000005B,
  CBZ_TEXTURE_FORMAT_ASTC12X10UNORM = 0X0000005C,
  CBZ_TEXTURE_FORMAT_ASTC12X10UNORMSRGB = 0X0000005D,
  CBZ_TEXTURE_FORMAT_ASTC12X12UNORM = 0X0000005E,
  CBZ_TEXTURE_FORMAT_ASTC12X12UNORMSRGB = 0X0000005F,
} CBZTextureFormat;

typedef enum {
  CBZ_IMAGE_NONE = 0,

  // Image can be used as binding via TextureSet() or ImageSet()
  CBZ_IMAGE_BINDING = 1 << 0,

  CBZ_IMAGE_COPY_SRC = 1 << 1,

  // Image can be used as a color/depth attachment
  CBZ_IMAGE_RENDER_ATTACHMENT = 1 << 2,
} CBZImageFlags;

typedef enum {
  CBZ_RENDER_ATTACHMENT_NONE = 0,

  CBZ_RENDER_ATTACHMENT_BLEND = 1 << 0,

  // CBZ_RENDER_ATTACHMENT_BLEND = 1 << 1,
} CBZRenderAttachmentFlags;

// @note one to one mapping with 'WGPUTextureDimension'
typedef enum {
  CBZ_TEXTURE_DIMENSION_1D = 0x00000000,
  CBZ_TEXTURE_DIMENSION_2D = 0x00000001,
  CBZ_TEXTURE_DIMENSION_3D = 0x00000002,
} CBZTextureDimension;

typedef enum : uint32_t {
    CBZ_TEXTURE_VIEW_DIMENSION_2D = 0,
    CBZ_TEXTURE_VIEW_DIMENSION_CUBE,
} CBZTextureViewDimension;

// @note one to one mapping with 'WGPUAddressMode'
typedef enum {
  CBZ_ADDRESS_MODE_REPEAT = 0X00000000,
  CBZ_ADDRESS_MODE_MIRRORREPEAT = 0X00000001,
  CBZ_ADDRESS_MODE_CLAMPTOEDGE = 0X00000002,

  CBZ_ADDRESS_MODE_COUNT,
} CBZAddressMode;

// @note one to one mapping with 'WGPUFilterMode'
typedef enum {
  CBZ_FILTER_MODE_NEAREST = 0X00000000,
  CBZ_FILTER_MODE_LINEAR = 0X00000001,
  CBZ_FILTER_MODE_COUNT,
} CBZFilterMode;

typedef enum {
  CBZ_SHADER_NONE,
  CBZ_SHADER_VERTEX = 1 << 0,
  CBZ_SHADER_FRAGMENT = 1 << 1,

  CBZ_SHADER_SPIRV = 1 << 2,
  CBZ_SHADER_WGLSL = 1 << 3,

  CBZ_SHADER_FORCE_32 = 0xFFFFFFFFu,
} CBZShaderFlags;

typedef enum {
  CBZ_UNIFORM_TYPE_UINT = 0, // uint32_t
  CBZ_UNIFORM_TYPE_VEC4,     // float[4]
  CBZ_UNIFORM_TYPE_MAT4,     // float[16]
} CBZUniformType;
static const uint32_t CBZ_UNIFORM_SIZE_VEC4 = sizeof(float) * 4;
static const uint32_t CBZ_UNIFORM_SIZE_MAT4 = sizeof(float) * 16;

typedef enum {
  CBZ_TARGET_TYPE_NONE,
  CBZ_TARGET_TYPE_GRAPHICS,
  CBZ_TARGET_TYPE_COMPUTE,
} CBZTargetType;

typedef enum {
  CBZ_BUFFER = 0,
  CBZ_BUFFER_COPY_SRC = 1 << 0,
  CBZ_BUFFER_COPY_DST = 1 << 1,
} CBZBufferFlags;

typedef enum {
  CBZ_GRAPHICS_PROGRAM_NONE = 0,
  CBZ_GRAPHICS_PROGRAM_FRONT_FACE_CW = 1 << 0,
  CBZ_GRAPHICS_PROGRAM_FRONT_FACE_CCW = 1 << 1,
  CBZ_GRAPHICS_PROGRAM_CULL_BACK = 1 << 2,
  CBZ_GRAPHICS_PROGRAM_CULL_FRONT = 1 << 3,
} CBZGraphicsProgramFlags;

typedef enum {
  CBZ_BUFFER_0 = 0,
  CBZ_BUFFER_1 = 1,
  CBZ_BUFFER_2 = 2,

  CBZ_BUFFER_GLOBAL_TRANSFORM = 3,
  CBZ_BUFFER_COUNT,
} CBZBufferSlot;

typedef enum {
  CBZ_TEXTURE_0 = 4,
  CBZ_TEXTURE_1 = 6,
  CBZ_TEXTURE_2 = 8,
  CBZ_TEXTURE_3 = 10,
  CBZ_TEXTURE_4 = 12,
} CBZTextureSlot;

typedef enum {
  CBZ_NETWORK_NONE = 0,
  CBZ_NETWORK_HOST,
  CBZ_NETWORK_CLIENT,
} CBZNetworkStatus;

constexpr uint8_t CBZ_DEFAULT_RENDER_TARGET = UINT8_MAX - 1;
constexpr uint8_t CBZ_INVALID_RENDER_TARGET = UINT8_MAX;

namespace cbz {
typedef enum : uint32_t {
  MAX_TARGETS = 128,
  MAX_TARGET_COLOR_ATTACHMENTS = 4,
  MAX_COMMAND_SUBMISSIONS = 512,
  MAX_COMMAND_TEXTURES = 32,
  MAX_COMMAND_BINDINGS = 16,
  COPY_BYTES_PER_ROW_ALIGNMENT = 256,
} CBZRendererLimits;

[[nodiscard]] constexpr uint32_t VertexFormatGetSize(CBZVertexFormat format) {
  switch (format) {
  // 2 bytes
  case CBZ_VERTEX_FORMAT_UINT8X2:
  case CBZ_VERTEX_FORMAT_SINT8X2:
  case CBZ_VERTEX_FORMAT_UNORM8X2:
  case CBZ_VERTEX_FORMAT_SNORM8X2:
    return 2;

  // 4 bytes
  case CBZ_VERTEX_FORMAT_UINT8X4:
  case CBZ_VERTEX_FORMAT_SINT8X4:
  case CBZ_VERTEX_FORMAT_UNORM8X4:
  case CBZ_VERTEX_FORMAT_SNORM8X4:
  case CBZ_VERTEX_FORMAT_UINT16X2:
  case CBZ_VERTEX_FORMAT_SINT16X2:
  case CBZ_VERTEX_FORMAT_UNORM16X2:
  case CBZ_VERTEX_FORMAT_SNORM16X2:
  case CBZ_VERTEX_FORMAT_FLOAT16X2:
  case CBZ_VERTEX_FORMAT_FLOAT32:
  case CBZ_VERTEX_FORMAT_UINT32:
  case CBZ_VERTEX_FORMAT_SINT32:
    return 4;

  // 8 bytes
  case CBZ_VERTEX_FORMAT_UINT16X4:
  case CBZ_VERTEX_FORMAT_SINT16X4:
  case CBZ_VERTEX_FORMAT_UNORM16X4:
  case CBZ_VERTEX_FORMAT_SNORM16X4:
  case CBZ_VERTEX_FORMAT_FLOAT16X4:
  case CBZ_VERTEX_FORMAT_FLOAT32X2:
  case CBZ_VERTEX_FORMAT_UINT32X2:
  case CBZ_VERTEX_FORMAT_SINT32X2:
    return 8;

  // 12 bytes
  case CBZ_VERTEX_FORMAT_FLOAT32X3:
  case CBZ_VERTEX_FORMAT_UINT32X3:
  case CBZ_VERTEX_FORMAT_SINT32X3:
    return 12;

  // 16 bytes
  case CBZ_VERTEX_FORMAT_FLOAT32X4:
  case CBZ_VERTEX_FORMAT_UINT32X4:
  case CBZ_VERTEX_FORMAT_SINT32X4:
    return 16;

  default:
    return 0;
  }
}

struct CBZ_API TextureBindingDesc {
  CBZFilterMode filterMode;
  CBZAddressMode addressMode;
  CBZTextureViewDimension viewDimension;
};

CBZ_NO_DISCARD constexpr uint32_t
TextureFormatGetSize(CBZTextureFormat format) {
  switch (format) {
  // 1 channel 8-bit
  case CBZ_TEXTURE_FORMAT_R8UNORM:
  case CBZ_TEXTURE_FORMAT_R8SNORM:
  case CBZ_TEXTURE_FORMAT_R8UINT:
  case CBZ_TEXTURE_FORMAT_R8SINT:
    return 1;

  // 1 channel 16-bit
  case CBZ_TEXTURE_FORMAT_R16UINT:
  case CBZ_TEXTURE_FORMAT_R16SINT:
  case CBZ_TEXTURE_FORMAT_R16FLOAT:
    return 2;

  // 2 CHANNELS 8-BIT
  case CBZ_TEXTURE_FORMAT_RG8UNORM:
  case CBZ_TEXTURE_FORMAT_RG8SNORM:
  case CBZ_TEXTURE_FORMAT_RG8UINT:
  case CBZ_TEXTURE_FORMAT_RG8SINT:
    return 2;

  // 1 CHANNEL 32-BIT
  case CBZ_TEXTURE_FORMAT_R32FLOAT:
  case CBZ_TEXTURE_FORMAT_R32UINT:
  case CBZ_TEXTURE_FORMAT_R32SINT:
    return 4;

  // 2 CHANNELS 16-BIT
  case CBZ_TEXTURE_FORMAT_RG16UINT:
  case CBZ_TEXTURE_FORMAT_RG16SINT:
  case CBZ_TEXTURE_FORMAT_RG16FLOAT:
    return 4;

  // 4 CHANNELS 8-BIT
  case CBZ_TEXTURE_FORMAT_RGBA8UNORM:
  case CBZ_TEXTURE_FORMAT_RGBA8UNORMSRGB:
  case CBZ_TEXTURE_FORMAT_RGBA8SNORM:
  case CBZ_TEXTURE_FORMAT_RGBA8UINT:
  case CBZ_TEXTURE_FORMAT_RGBA8SINT:
  case CBZ_TEXTURE_FORMAT_BGRA8UNORM:
  case CBZ_TEXTURE_FORMAT_BGRA8UNORMSRGB:
    return 4;

  // PACKED FORMATS
  case CBZ_TEXTURE_FORMAT_RGB10A2UINT:
  case CBZ_TEXTURE_FORMAT_RGB10A2UNORM:
  case CBZ_TEXTURE_FORMAT_RG11B10UFLOAT:
  case CBZ_TEXTURE_FORMAT_RGB9E5UFLOAT:
    return 4;

  // 2 CHANNELS 32-BIT
  case CBZ_TEXTURE_FORMAT_RG32FLOAT:
  case CBZ_TEXTURE_FORMAT_RG32UINT:
  case CBZ_TEXTURE_FORMAT_RG32SINT:
    return 8;

  // 4 CHANNELS 16-BIT
  case CBZ_TEXTURE_FORMAT_RGBA16UINT:
  case CBZ_TEXTURE_FORMAT_RGBA16SINT:
  case CBZ_TEXTURE_FORMAT_RGBA16FLOAT:
    return 8;

  // 4 CHANNELS 32-BIT
  case CBZ_TEXTURE_FORMAT_RGBA32FLOAT:
  case CBZ_TEXTURE_FORMAT_RGBA32UINT:
  case CBZ_TEXTURE_FORMAT_RGBA32SINT:
    return 16;

  // DEPTH/STENCIL
  case CBZ_TEXTURE_FORMAT_STENCIL8:
    return 1;
  case CBZ_TEXTURE_FORMAT_DEPTH16UNORM:
    return 2;
  case CBZ_TEXTURE_FORMAT_DEPTH24PLUS:
  case CBZ_TEXTURE_FORMAT_DEPTH24PLUSSTENCIL8:
    return 4; // APPROXIMATION
  case CBZ_TEXTURE_FORMAT_DEPTH32FLOAT:
    return 4;
  case CBZ_TEXTURE_FORMAT_DEPTH32FLOATSTENCIL8:
    return 5;

  // BLOCK COMPRESSED FORMATS (SIZE PER 4X4 BLOCK)
  case CBZ_TEXTURE_FORMAT_BC1RGBAUNORM:
  case CBZ_TEXTURE_FORMAT_BC1RGBAUNORMSRGB:
  case CBZ_TEXTURE_FORMAT_BC4RUNORM:
  case CBZ_TEXTURE_FORMAT_BC4RSNORM:
    return 8;
  case CBZ_TEXTURE_FORMAT_BC2RGBAUNORM:
  case CBZ_TEXTURE_FORMAT_BC2RGBAUNORMSRGB:
  case CBZ_TEXTURE_FORMAT_BC3RGBAUNORM:
  case CBZ_TEXTURE_FORMAT_BC3RGBAUNORMSRGB:
  case CBZ_TEXTURE_FORMAT_BC5RGUNORM:
  case CBZ_TEXTURE_FORMAT_BC5RGSNORM:
  case CBZ_TEXTURE_FORMAT_BC6HRGBUFLOAT:
  case CBZ_TEXTURE_FORMAT_BC6HRGBFLOAT:
  case CBZ_TEXTURE_FORMAT_BC7RGBAUNORM:
  case CBZ_TEXTURE_FORMAT_BC7RGBAUNORMSRGB:
    return 16;

  default:
    return 0; // UNKNOWN OR UNDEFINED
  }
}

struct CBZ_API VertexAttribute {
  CBZVertexFormat format;
  uint64_t offset;
  uint32_t shaderLocation;
};

struct CBZ_API Origin3D {
  uint32_t x;
  uint32_t y;
  uint32_t z;
};

struct CBZ_API TextureExtent {
  int width;
  int height;
  int layers;
};

// TODO: Make invalid handle 0
//  @note Handles may be recycled when destroyed
#define CBZ_INVALID_HANDLE ((uint16_t)0xFFFF)
#define CBZ_HANDLE(name)                                                       \
  struct CBZ_API name {                                                        \
    uint16_t idx;                                                              \
    explicit operator bool() const { return idx != CBZ_INVALID_HANDLE; }       \
  };

CBZ_HANDLE(VertexBufferHandle);
CBZ_HANDLE(IndexBufferHandle);

CBZ_HANDLE(StructuredBufferHandle);
CBZ_HANDLE(ImageHandle);

struct CBZ_API SamplerHandle {
  uint32_t idx;
};

struct CBZ_API AttachmentDescription {
  // Color clear values
  struct Color {
    double r;
    double g;
    double b;
    double a;
  } clearValue = {0.0, 0.0, 0.0, 1.0}; 

  // Image Handle created with CBZ_IMAGE_RENDER_ATTACHMENT
  cbz::ImageHandle imgh = {CBZ_INVALID_HANDLE}; 

  uint32_t baseArrayLayer = 0;
  uint32_t arrayLayerCount = 1;

  // CBZRenderAttachmentFlags
  int flags = 0; 
};

CBZ_HANDLE(UniformHandle);

CBZ_HANDLE(ShaderHandle);
CBZ_HANDLE(GraphicsProgramHandle);
CBZ_HANDLE(ComputeProgramHandle);

CBZ_HANDLE(FramebufferHandle);

}; // namespace cbz

// TODO: Remove stl from public fns
#include <vector>
namespace cbz {
class CBZ_API VertexLayout {
public:
  void begin(CBZVertexStepMode mode);
  void push_attribute(CBZVertexAttributeType type, CBZVertexFormat format);
  void end();

  bool operator==(const VertexLayout &other) const;
  bool operator!=(const VertexLayout &other) const;

  std::vector<VertexAttribute> attributes;
  CBZVertexStepMode stepMode = CBZ_VERTEX_STEP_MODE_VERTEX;
  uint32_t stride = 0;
};
} // namespace cbz

#endif
